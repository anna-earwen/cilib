<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
    <algorithms>
        <algorithm id="barebones" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <!--iterationStrategy class="pso.iterationstrategies.ASynchronousIterationStrategy"/-->
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="20">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionProvider class="pso.positionprovider.LinearPositionProvider"/>
                    <velocityProvider class="pso.velocityprovider.CauchyGaussianVelocityProvider">
                        <!--randomDistribution class="math.random.ExponentialDistribution">
                            <rate class="controlparameter.ConstantControlParameter" parameter="2"/>
                        </randomDistribution-->
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
        </algorithm>
        
        <algorithm id="small-gbest" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="4">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <!--velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1"/>
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <!--personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" /-->
                    <!--velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1"/>
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest-single" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="3"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <velocityProvider class="pso.velocityprovider.WeightedInertiaVelocityProvider" />
                       <!--vMax class="controlparameter.ConstantControlParameter" parameter="1"/>
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="greedy-coop-pso-3" class="coevolution.cooperative.GreedyTemperedCooperativeCoevolutionAlgorithm" greedyIterations="15">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.NeuralNetworkDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
        </algorithm>
        <algorithm id="greedy-coop-barebones-3" class="coevolution.cooperative.GreedyTemperedCooperativeCoevolutionAlgorithm" greedyIterations="15">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="500"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.NeuralNetworkDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="barebones"/>
            <addPopulationBasedAlgorithm idref="barebones"/>
            <addPopulationBasedAlgorithm idref="barebones"/>
        </algorithm>
        <algorithm id="coop-pso-3" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="100"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.NeuralNetworkDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
            <addPopulationBasedAlgorithm idref="gbest"/>
        </algorithm> 
        <algorithm id="qpso" class="pso.PSO">
            <iterationStrategy class="pso.dynamic.DynamicIterationStrategy">
                <detectionStrategy class="pso.dynamic.detectionstrategies.AlwaysTrueDetectionStrategy" />
                <responseStrategy class="pso.dynamic.responsestrategies.ParticleReevaluationResponseStrategy"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ChargedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.dynamic.ChargedParticle">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider" />
                        <!--delegate class="pso.velocityprovider.ClampingVelocityProvider">
                           <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                         </delegate>
                    </velocityProvider-->
                    <positionProvider class="pso.dynamic.QuantumPositionProvider">
                        <radius class="controlparameter.ConstantControlParameter" parameter="3" />
                    </positionProvider>
                </entityType>
            </initialisationStrategy>
        </algorithm>
        <algorithm id="qpso-h" class="pso.PSO">
            <iterationStrategy class="pso.dynamic.DynamicIterationStrategy">
                <iterationStrategy class="pso.iterationstrategies.HendtlassSynchronousIterationStrategy">
                    <boundaryConstraint class="problem.boundaryconstraint.BouncingBoundaryConstraint" /> 
                </iterationStrategy>
                <detectionStrategy class="pso.dynamic.detectionstrategies.AlwaysTrueDetectionStrategy" />
                <responseStrategy class="pso.dynamic.responsestrategies.ParticleReevaluationResponseStrategy"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ChargedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.dynamic.ChargedParticle">
                    <velocityProvider class="pso.dynamic.QuantumVelocityProvider">
                        <delegate class="pso.velocityprovider.WeightedInertiaVelocityProvider" />
                    </velocityProvider>
                    <positionProvider class="pso.dynamic.QuantumPositionProvider">
                        <radius class="controlparameter.ConstantControlParameter" parameter="3" />
                    </positionProvider>
                </entityType>
            </initialisationStrategy>
        </algorithm>

        <algorithm id="gbest-o" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <!--velocityInitialisationStrategy class="entity.initialisation.RandomInitialisationStrategy" /-->
                                        <!--velocityProvider class="pso.velocityprovider.NoisyVelocityProvider">
                       <delegate class="pso.velocityprovider.StandardVelocityProvider" />
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.BouncingBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest-b" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-2" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="2" />                
                    </positionInitialisationStrategy>
                    <!--velocityProvider class="pso.velocityprovider.WeightedInertiaVelocityProvider" /-->
                    <!--velocityProvider class="pso.velocityprovider.NoisyVelocityProvider">
                       <delegate class="pso.velocityprovider.StandardVelocityProvider" />
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="greedy-coop-pso-3" class="coevolution.cooperative.GreedyTemperedCooperativeCoevolutionAlgorithm" greedyIterations="5">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/>
        </algorithm>
        <algorithm id="greedy-tempered-hendtlass-coop-pso-3" class="coevolution.cooperative.GreedyTemperedCooperativeCoevolutionAlgorithm" greedyIterations="5">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-hendtlass"/>
            <addPopulationBasedAlgorithm idref="gbest-hendtlass"/>
            <addPopulationBasedAlgorithm idref="gbest-hendtlass"/>
        </algorithm>
        <algorithm id="gbest-hendtlass" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-2" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="2" />                
                    </positionInitialisationStrategy>
                    <!--velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />                                        
                    </velocityInitialisationStrategy-->
                    <velocityProvider class="pso.velocityprovider.WeightedInertiaVelocityProvider" />
                    <!--velocityProvider class="pso.velocityprovider.NoisyVelocityProvider">
                       <delegate class="pso.velocityprovider.StandardVelocityProvider" />
                    </velocityProvider-->
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.HendtlassSynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
                <!--filter class="controlparameter.ConstantControlParameter" parameter="0.5" />
                <pwr class="controlparameter.ConstantControlParameter" parameter="1" /-->                
            </iterationStrategy>
        </algorithm>
        <algorithm id="coop-pso-imperfect-5" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/> 
            <!--addPopulationBasedAlgorithm idref="gbest-b"/>
            <addPopulationBasedAlgorithm idref="gbest-b"/> 
            <addPopulationBasedAlgorithm idref="gbest-b"/-->
        </algorithm>
        <algorithm id="coop-qpso" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="qpso"/>
            <addPopulationBasedAlgorithm idref="qpso"/> 
        </algorithm>
        <algorithm id="coop-qpso-h" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="qpso-h"/>
            <addPopulationBasedAlgorithm idref="qpso-h"/> 
        </algorithm>
        <algorithm id="coop-pso-imperfect-6" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
            <addPopulationBasedAlgorithm idref="small-gbest"/>
        </algorithm>
        <algorithm id="gbest-10-bounded-2" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />  
                        <random class="math.random.GaussianDistribution" />          
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">                      
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.6" />
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest-10" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />                
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" />
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>       
        <algorithm id="gbest-10-bounded-1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />  
                        <!--random class="math.random.GaussianDistribution" /-->          
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.25" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.25" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">                      
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.6" />
                    </velocityProvider><!--velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider--><!--velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" /-->                      
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="coop-pso-imperfect-5-bounded-1" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
        </algorithm>
        <algorithm id="coop-pso-imperfect-5-bounded-2" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="50"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
        </algorithm>
        <algorithm id="coop-pso-imperfect-3" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
        </algorithm>
        <algorithm id="gcpsoLB" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="20">
                <entityType class="pso.particle.StandardParticle">
                    <velocityInitialisationStrategy class="entity.initialisation.ConstantInitialisationStrategy" constant="0.0" />
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider">
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.729844" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.496180" />
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.496180" />
                        </delegate>
                    </velocityProvider>
                    <neighbourhoodBestUpdateStrategy class="pso.positionprovider.MemoryNeighbourhoodBestUpdateStrategy" />
                </entityType>
            </initialisationStrategy>
            <neighbourhood class="entity.topologies.LBestNeighbourhood">
                <neighbourhoodSize value="5" />
            </neighbourhood>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
        </algorithm>

        <algorithm id="gradientdescent" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.0005" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.5" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="500" />
        </algorithm>
    </algorithms>

    <problems>
        <problem id="nn-mnist-300" class="problem.nn.NNOnlineTrainingProblem" trainingSetPercentage="0.857" generalisationSetPercentage="0.143" shuffle="false" onlineSize="100">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.MNISTBlurReader" inputTrain="data/input/train-images-idx3-ubyte" labelTrain="data/input/train-labels-idx1-ubyte" inputTest="data/input/t10k-images-idx3-ubyte" labelTest="data/input/t10k-labels-idx1-ubyte"/> <!-- for reconstruction: step = # targets -->
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="784" classLength="10" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="196"/><!-- 784 -->
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="300">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-3:3)" />
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-mnist-100-full-blur-elliott-1" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.857" generalisationSetPercentage="0.143">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.MNISTBlurReader" inputTrain="data/input/train-images-idx3-ubyte" labelTrain="data/input/train-labels-idx1-ubyte" inputTest="data/input/t10k-images-idx3-ubyte" labelTest="data/input/t10k-labels-idx1-ubyte"
                targetLowerRange="-0.9" targetUpperRange="0.9" lowerRange="-1.5" upperRange="1.5" /> <!-- for reconstruction: step = # targets -->
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="196" classLength="10" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="196"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="100">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-elliott" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-3:3)" />
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-300-elliott" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-12-rectifier" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Rectifier" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-12-sigmoid" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-12-tanh" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.TanH" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-dec-sigmoid" class="problem.nn.NNRegularisationDecorator">    
            <penalty class="nn.penalty.WeightDecayPenalty" />
            <lambda class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
                </dataTableBuilder>
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                                <activationFunction class="functions.activation.Elliott" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-5:5)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="nn-12-elliott" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-5:5)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-12-logarithmic" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Logarithmic" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-sig" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="../library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider>
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-lin" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="../library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider>
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.Fitness"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/> 
        <!--addMeasurement class="measurement.multiple.CompositeMeasurement">  
            <addMeasurement class="measurement.single.ParticlePositionVector" />
        </addMeasurement>     
        <addMeasurement class="measurement.multiple.CompositeMeasurement">   
            <addMeasurement class="measurement.single.ParticleVelocity" />
        </addMeasurement-->   <!--addMeasurement class="measurement.single.ParticlePositionVector" />
        <addMeasurement class="measurement.single.ParticleVelocity" /-->
        <!--addMeasurement class="measurement.multiple.CompositeAverageMeasurement">  
            <addMeasurement class="measurement.single.PBestStagnationAverage" />
        </addMeasurement>      
        <addMeasurement class="measurement.single.GBestChange" /-->
        <!--addMeasurement class="measurement.single.BestSolutionImprovement" /-->
        <!--addMeasurement class="measurement.multiple.CooperativeParticleBoundViolations" />       
        <addMeasurement class="measurement.multiple.CooperativeParticleVelocity"/-->      
        <!--addMeasurement class="measurement.multiple.CooperativeAbsoluteAverageVelocity"/-->       
        <!--addMeasurement class="measurement.single.AverageSpeed"/-->             
        <!--addMeasurement class="measurement.multiple.CooperativeAbsoluteAveragePosition"/>       
        <addMeasurement class="measurement.multiple.CooperativeAverageDistanceFromOrigin"/-->      
        <!--addMeasurement class="measurement.multiple.CooperativeParticleVelocity1Dim"/-->   
        <!--addMeasurement class="measurement.single.diversity.CooperativeDiversity"/-->
    </measurements>

    <simulations>
        <!--simulation samples="1">
            <algorithm idref="coop-pso-imperfect-5-bounded-1"/>
            <problem idref="nn-mnist-100-full-blur-elliott-1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/test_mnist_inertia_0.6_1_randbound_uniform.csv"/>
        </simulation-->
        <simulation samples="1">
            <algorithm idref="gbest30"/>
            <problem idref="nn-dec-sigmoid"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nn_decay_test.csv"/>
        </simulation>
        <!--simulation samples="10">
            <algorithm idref="coop-pso-imperfect-3"/>
            <problem idref="nn-12-sigmoid"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/test_sigmoid.csv"/>
        </simulation>
        <simulation samples="10">
            <algorithm idref="coop-pso-imperfect-3"/>
            <problem idref="nn-12-elliott"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/test_elliott.csv"/>
        </simulation>
        <simulation samples="10">
            <algorithm idref="coop-pso-imperfect-3"/>
            <problem idref="nn-12-tanh"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/test_tanh.csv"/>
        </simulation>
        <simulation samples="10">
            <algorithm idref="coop-pso-imperfect-3"/>
            <problem idref="nn-12-logarithmic"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/test_logarithmic.csv"/>
        </simulation-->
    
        <!--simulation samples="2">
            <algorithm idref="gradientdecent"/>
            <problem idref="nn4-8-1-sig"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gd_nn_iris_fitness.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gcpsoLB"/>
            <problem idref="nn4-8-1-lin"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gbest_nn-lin_iris_fitness.csv"/>
        </simulation>

        <simulation samples="2">
            <algorithm idref="gradientdecent"/>
            <problem idref="nn4-8-1-lin"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/gd_nn-lin_iris_fitness.csv"/>
        </simulation-->
    </simulations>
</simulator>
