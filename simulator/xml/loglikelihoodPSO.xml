<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
    <algorithms> 
        <algorithm id="coop_gbest30vmax1.0_2" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.NeuralNetworkDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_15"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_15"/>
        </algorithm>
        <algorithm id="coop_gbest30_6" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
            <addPopulationBasedAlgorithm idref="gbest30_5"/>
        </algorithm>
        <algorithm id="coop_gbest30vmax1.0_6" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
            <addPopulationBasedAlgorithm idref="gbest30vmax1.0_5"/>
        </algorithm>
        <algorithm id="coop_gbest30normW0.8sa1.3ca0.9_2" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.NeuralNetworkDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_15"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_15"/>
        </algorithm>
        <algorithm id="coop_gbest30normW0.8sa1.3ca0.9_6" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
            <addPopulationBasedAlgorithm idref="gbest30normW0.8sa1.3ca0.9_5"/>
        </algorithm>
        <algorithm id="gbest30vmax0.01" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax0.05" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax1.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax1.0norm" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax1.0_15" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="15">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax1.0_5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="5">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30_5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="5">
                <entityType class="pso.particle.StandardParticle" />
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="gbest30normDefaults_decaying" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider" />
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.9_decaying" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.9" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="gbest30norm1.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <!--inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.1" /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30norm2.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <!--inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.1" /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30norm5.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <!--inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.1" /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30norm10.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="10.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <!--inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.1" /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.1" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.3" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.5" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.7" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.7" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.9" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.9" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW1.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="1.1" />
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normWdefault" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <!--inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.9" /-->
                            <!--socialAcceleration />
                            <cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa0.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.3"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa0.7" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.7"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa0.9" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.9"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.1"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.5"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.7" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.7"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.9" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.9"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa2.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.1"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa2.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="2.3"/>
                            <!--cognitiveAcceleration /-->
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="gbest30normW0.8sa1.3ca0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.1" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.3" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.5" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.7" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.7" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.9" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.9" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.9_15" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="15">
                <entityType class="pso.particle.StandardParticle">
                    <!--personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-2" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="2" />  
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />                                        
                    </velocityInitialisationStrategy-->
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.9" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca0.9_5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="5">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="0.9" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca1.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.1" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca1.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca1.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.5" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca1.7" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.7" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca1.9" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.9" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca2.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.1" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30normW0.8sa1.3ca2.3" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.NormalisedClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                        <delegate class="pso.velocityprovider.StandardVelocityProvider">
                            <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.8" />
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.3"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="2.3" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        
        <algorithm id="gbest30vmax2.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30vmax5.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest30" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="gbestDecaying30vmax0.001" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.001"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax0.01" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax0.05" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax1.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax2.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30vmax5.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbestDecaying30" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle" />
            </initialisationStrategy>  
        </algorithm>
        <!-- VN: -->
        <algorithm id="vn30vmax0.01" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax0.05" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax1.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax2.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30vmax5.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn30" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle" />
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="vnDecaying30vmax0.001" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.001"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax0.01" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax0.05" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax0.1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax0.5" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax1.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax2.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30vmax5.0" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vnDecaying30" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle" />
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="lbest30" class="pso.PSO">            
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle" />
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax0.01" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax0.05" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax0.1" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax0.5" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax1.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax2.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbest30vmax5.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="lbestDecaying30" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle" />
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax0.001" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.001"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax0.01" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.01"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax0.05" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.05"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax0.1" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.1"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax0.5" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax1.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax2.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="2.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="lbestDecaying30vmax5.0" class="pso.PSO">
            <neighbourhood class="entity.topologies.LBestNeighbourhood" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle">
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="5.0"/>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        
        <algorithm id="gbest30constr" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" />      
                </entityType>
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="gbest-30-bounded-1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />  
                        <!--random class="math.random.GaussianDistribution" /-->          
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.25" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.25" />                                        
                    </velocityInitialisationStrategy>
                    <!--velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider--><!--velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" /-->                      
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest-weight-decay-unbounded" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle" />
            </initialisationStrategy>  
        </algorithm>
        <algorithm id="vn-weight-decay" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <neighbourhood class="entity.topologies.VonNeumannNeighbourhood" />
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="30">
                <entityType class="pso.particle.DecayingParticle" >
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" /> 
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest-10-bounded-2" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />  
                        <random class="math.random.GaussianDistribution" />          
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">                      
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.6" />
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="gbest-10" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />                
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-1" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="1" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" />
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>       
        <algorithm id="gbest-10-bounded-1" class="pso.PSO">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy" entityNumber="10">
                <entityType class="pso.particle.StandardParticle">
                    <personalBestUpdateStrategy class="pso.pbestupdate.BoundedPersonalBestUpdateStrategy" />
                    <positionInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.5" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.5" />  
                        <!--random class="math.random.GaussianDistribution" /-->          
                    </positionInitialisationStrategy>
                    <velocityInitialisationStrategy class="entity.initialisation.RandomSimpleBoundedInitialisationStrategy">
                        <lowerBound class="controlparameter.ConstantControlParameter" parameter="-0.25" />
                        <upperBound class="controlparameter.ConstantControlParameter" parameter="0.25" />                                        
                    </velocityInitialisationStrategy>
                    <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">                      
                        <inertiaWeight class="controlparameter.ConstantControlParameter" parameter="0.6" />
                    </velocityProvider><!--velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                       <vMax class="controlparameter.ConstantControlParameter" parameter="0.5"/>
                    </velocityProvider--><!--velocityProvider class="pso.velocityprovider.ConstrictionVelocityProvider" /-->                      
                </entityType>
            </initialisationStrategy>  
            <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                <boundaryConstraint class="problem.boundaryconstraint.RandomBoundaryConstraint" />
            </iterationStrategy>
        </algorithm>
        <algorithm id="coop-pso-imperfect-5-bounded-1" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="10"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-1"/>
        </algorithm>
        <algorithm id="coop-pso-imperfect-5-bounded-2" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="50"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
            <addPopulationBasedAlgorithm idref="gbest-10-bounded-2"/>
        </algorithm>
        <algorithm id="coop-pso-imperfect-3" class="coevolution.cooperative.CooperativeCoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="2000"/>
            <problemDistribution class="coevolution.cooperative.problemdistribution.ImperfectSplitDistributionStrategy" />
            <contributionSelectionStrategy class="coevolution.cooperative.contributionselection.SocialFitnessContributionSelectionStrategy"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
            <addPopulationBasedAlgorithm idref="gbest-10"/>
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.1" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.2" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.2" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.3" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.3" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.4" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.4" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.5" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.5" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.6" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.6" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.7" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.7" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.8" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.8" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.1_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.2_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.2" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.3_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.3" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.4_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.4" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.5_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.5" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.6_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.6" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.7_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.7" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.8_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.8" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        <algorithm id="gradientdescent_0.9_0.9" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
        </algorithm>
        
        <algorithm id="gd-decay-0.000005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.000005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.00001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.00005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.0001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.0005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.0005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.01" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.01" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.05" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.05" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.1" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.1" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-decay-0.5" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightDecayPenalty">
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.5" />
                </penalty>
            </bpVisitor>
        </algorithm>
        
        <algorithm id="gd-elim-l0.00001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.0001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.0005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.0005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.005" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.005" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.01" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.01" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.05" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.05" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.1" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.1" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.5" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.5" />
                </penalty>
            </bpVisitor>
        </algorithm>        
        
        <algorithm id="gd-elim-l0.00005-c0.00001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="0.00001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c0.0001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="0.0001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c0.001" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="0.001" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c0.01" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="0.01" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c0.1" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="0.1" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c1" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="1" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c2" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="2" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c5" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="5" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-l0.00005-c10" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.1" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
                    <c class="controlparameter.ConstantControlParameter" parameter="10" />
                </penalty>
            </bpVisitor>
        </algorithm>
        
        <algorithm id="gd-elim" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.3" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" />
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-elim-0.3" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.3" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.WeightEliminationPenalty" >
                    <lambda class="controlparameter.ConstantControlParameter" parameter="0.3" />
                </penalty>
            </bpVisitor>
        </algorithm>
        <algorithm id="gd-zeroweight" class="gd.GradientDescentBackpropagationTraining">
            <learningRate class="controlparameter.ConstantControlParameter" parameter="0.3" />
            <momentum class="controlparameter.ConstantControlParameter" parameter="0.9" />
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000" />
            <bpVisitor class="nn.architecture.visitors.BackPropagationVisitor">
                <penalty class="nn.penalty.NonZeroWeightPenalty" />
            </bpVisitor>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="nn-mnist-100-full-blur-elliott-1" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.857" generalisationSetPercentage="0.143">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.MNISTBlurReader" inputTrain="data/input/train-images-idx3-ubyte" labelTrain="data/input/train-labels-idx1-ubyte" inputTest="data/input/t10k-images-idx3-ubyte" labelTest="data/input/t10k-labels-idx1-ubyte"
                targetLowerRange="-0.9" targetUpperRange="0.9" lowerRange="-1.5" upperRange="1.5" /> <!-- for reconstruction: step = # targets -->
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="196" classLength="10" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="196"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="100">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-elliott" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="10">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-3:3)" />
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="proben1_cancer" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/proben1_cancer.dt"/>
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classLength="2" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="9"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="proben1_diabetes" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/proben1_diabetes.dt"/>
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classLength="2" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="8"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="proben1_heart" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/proben1_heart.dt"/>
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classLength="2" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="35"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="cancer" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/cancer.csv" />
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="30" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.1:0.1)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.5:0.5)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris_class" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <fitnessCalculator class="nn.fitness.ClassificationErrorFitnessCalculator" outputSensitivityThreshold="0.35"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris_loglikelihood" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <fitnessCalculator class="nn.fitness.LogLikelihoodFitnessCalculator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris_softmax" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <fitnessCalculator class="nn.fitness.LogLikelihoodFitnessCalculator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
            <neuralNetwork class="nn.NeuralNetwork">
                <operationVisitor class="nn.architecture.visitors.SoftmaxFeedForwardVisitor" />
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Exponent" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        
        <problem id="diabetes_loglikelihood" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <fitnessCalculator class="nn.fitness.LogLikelihoodFitnessCalculator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/diabetes.csv" />
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="8" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.3:0.3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="diabetes" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/diabetes.csv" />
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="8" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.3:0.3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        
        <problem id="heart_loglikelihood" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <fitnessCalculator class="nn.fitness.LogLikelihoodFitnessCalculator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/heart.csv" />
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="32" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.4:0.4)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="heart" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/heart.csv" />
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="32" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="6">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.4:0.4)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris_lin" class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
            <shuffler class="io.transform.ShuffleOperator"/>
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
            </dataTableBuilder>
            <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="iris-elim-l0.00001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.0001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.0005" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.005" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.01" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.01" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.05" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.05" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.1" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.1" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.5" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.5" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        
        <problem id="iris-elim-l0.00005-c0.00001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="0.00001" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c0.0001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="0.0001" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c0.001" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="0.001" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c0.01" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="0.01" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c0.1" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="0.1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c1" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="1" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>        
        <problem id="iris-elim-l0.00005-c2-lin" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="2" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c2" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="2" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-5:5)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c5" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="5" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-elim-l0.00005-c10" class="problem.nn.NNRegularisationDecorator">   
            <shuffler class="io.transform.ShuffleOperator"/>
            <penalty class="nn.penalty.WeightEliminationPenalty" >                
                <c class="controlparameter.ConstantControlParameter" parameter="10" />
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true" trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4" >
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.000005" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.000005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.00001-lin" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.00001" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.00005-lin" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.00005" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.00005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.8" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-5:5)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.0001" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.0005" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.0005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.001" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.001" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.005" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.005" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.01" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.01" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.05" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.05" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.1" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.1" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-0.5" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="0.5" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-0.2:0.2)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-1" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="1" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="8">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-5" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="5" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="8">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="iris-decay-10" class="problem.nn.NNRegularisationDecorator" shuffle="true" >    
            <penalty class="nn.penalty.WeightDecayPenalty">
                <lambda class="controlparameter.ConstantControlParameter" parameter="10" />
            </penalty>
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" shuffle="true"  trainingSetPercentage="0.6" generalisationSetPercentage="0.2">
                <shuffler class="io.transform.ShuffleOperator"/>
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris.csv" />
                </dataTableBuilder>
                <patternConversionOperator class="io.transform.PatternConversionOperator" classIndex="4" classLength="3" />
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="8">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="nn-decay-sigmoid" class="problem.nn.NNRegularisationDecorator">    
            <penalty class="nn.penalty.WeightDecayPenalty" />
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris_scaled.csv" />
                </dataTableBuilder>
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="5"/>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="8">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="nn-zeroweight-sigmoid" class="problem.nn.NNRegularisationDecorator">    
            <penalty class="nn.penalty.NonZeroWeightPenalty" />
            <neuralNetworkProblem class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
                <dataTableBuilder class="io.DataTableBuilder">
                    <dataReader class="io.DelimitedTextFileReader" delimiter=" " sourceURL="data/input/iris_scaled.csv" />
                </dataTableBuilder>
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="5"/>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="8">
                                <activationFunction class="functions.activation.Sigmoid" />
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                                <activationFunction class="functions.activation.Linear" />
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                                <domainProvider class="nn.domain.PresetNeuronDomain">
                                    <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-1:1)"/>
                                </domainProvider> 
                            </layerBuilder>
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
            </neuralNetworkProblem>
        </problem>
        <problem id="nn-12-elliott" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Elliott" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-5:5)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn-12-logarithmic" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.7" generalisationSetPercentage="0.3">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="12">
                            <activationFunction class="functions.activation.Logarithmic" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1">
                            <activationFunction class="functions.activation.Linear" />
                        </addLayer>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider> 
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
        <problem id="nn4-8-1-sig" class="problem.nn.NNDataTrainingProblem" trainingSetPercentage="0.6" generalisationSetPercentage="0.4">
            <dataTableBuilder class="io.DataTableBuilder">
                <dataReader class="io.ARFFFileReader" sourceURL="../library/src/test/resources/datasets/iris.arff"/>
            </dataTableBuilder>
            <neuralNetwork class="nn.NeuralNetwork">
                <architecture class="nn.architecture.Architecture">
                    <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="4"/>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="3">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="2">
                            <activationFunction class="functions.activation.Sigmoid" />
                        </addLayer>
                        <addLayer class="nn.architecture.builder.LayerConfiguration" size="1"/>
                        <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder">
                            <domainProvider class="nn.domain.PresetNeuronDomain">
                                <weightDomainPrototype class="type.StringBasedDomainRegistry" domainString="R(-3:3)"/>
                            </domainProvider>
                        </layerBuilder>
                    </architectureBuilder>
                </architecture>
            </neuralNetwork>
        </problem>
    </problems>

    <measurements id="fitness_hidden" class="simulator.MeasurementSuite" resolution="100">
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>   
        <addMeasurement class="measurement.single.NNHiddenOutput"/>
        <addMeasurement class="measurement.single.NNWeights" />
        <!--addMeasurement class="measurement.single.ParticlePositionVector" /-->
        <addMeasurement class="measurement.single.ParticleVelocity" /> 
        <addMeasurement class="measurement.single.diversity.Diversity"/>
    </measurements>
    <measurements id="gd_fitness_hidden" class="simulator.MeasurementSuite" resolution="100">
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>  
        <addMeasurement class="measurement.single.NNHiddenOutput"/>
        <addMeasurement class="measurement.single.NNWeights" />
    </measurements>
    <measurements id="fitness_hidden_coop" class="simulator.MeasurementSuite" resolution="100">
        <!--addMeasurement class="measurement.single.Fitness"/-->
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>  
        <addMeasurement class="measurement.single.NNHiddenOutput"/>
        <addMeasurement class="measurement.single.NNWeights" /> 
        <addMeasurement class="measurement.single.diversity.CooperativeDiversity"/>
    </measurements>
    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <!--addMeasurement class="measurement.single.Fitness"/-->
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>   
        <addMeasurement class="measurement.single.diversity.Diversity"/>
        <!--addMeasurement class="measurement.multiple.CompositeMeasurement">  
            <addMeasurement class="measurement.single.ParticlePositionVector" />
        </addMeasurement>     
        <addMeasurement class="measurement.multiple.CompositeMeasurement">   
            <addMeasurement class="measurement.single.ParticleVelocity" />
        </addMeasurement-->   <!--addMeasurement class="measurement.single.ParticlePositionVector" />
        <addMeasurement class="measurement.single.ParticleVelocity" /-->
        <!--addMeasurement class="measurement.multiple.CompositeAverageMeasurement">  
            <addMeasurement class="measurement.single.PBestStagnationAverage" />
        </addMeasurement>      
        <addMeasurement class="measurement.single.GBestChange" /-->
        <!--addMeasurement class="measurement.single.BestSolutionImprovement" /-->
        <!--addMeasurement class="measurement.multiple.CooperativeParticleBoundViolations" />       
        <addMeasurement class="measurement.multiple.CooperativeParticleVelocity"/-->      
        <!--addMeasurement class="measurement.multiple.CooperativeAbsoluteAverageVelocity"/-->       
        <!--addMeasurement class="measurement.single.AverageSpeed"/-->             
        <!--addMeasurement class="measurement.multiple.CooperativeAbsoluteAveragePosition"/>       
        <addMeasurement class="measurement.multiple.CooperativeAverageDistanceFromOrigin"/-->      
        <!--addMeasurement class="measurement.multiple.CooperativeParticleVelocity1Dim"/-->   
        <!--addMeasurement class="measurement.single.diversity.CooperativeDiversity"/-->
    </measurements>
    <measurements id="fitness_coop" class="simulator.MeasurementSuite" resolution="1">
        <!--addMeasurement class="measurement.single.Fitness"/-->
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>   
        <addMeasurement class="measurement.single.diversity.CooperativeDiversity"/>
    </measurements>
    <measurements id="gd_fitness" class="simulator.MeasurementSuite" resolution="1">
        <!--addMeasurement class="measurement.single.Fitness"/-->
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNClassificationGeneralisationError"/>   
    </measurements>

    <measurements id="fitness_penalty" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.MSETrainingError"/>
        <addMeasurement class="measurement.single.MSEGeneralisationError"/>
        <addMeasurement class="measurement.single.NNPenaltyValue"/>   
    </measurements>
    <simulations>
        <!--simulation samples="30">
            <algorithm idref="coop_gbest30_6"/>
            <problem idref="iris"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_def_novmax_coop6.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="coop_gbest30vmax1.0_6"/>
            <problem idref="iris"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_def_coop6.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30vmax1.0_2"/>
            <problem idref="iris"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_def_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_6"/>
            <problem idref="iris"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_W0.8sa1.3ca0.9_coop6.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_elim_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_decay_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_W0.8sa1.3ca0.9_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9_decaying"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_W0.8sa1.3ca0.9_decaying_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gbest30normDefaults_decaying"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gbest_norm_defaults_decaying_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gradientdescent_0.1_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_gd_0.1_0.9_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gd-elim-l0.00005-c2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_elim_gd_0.1_0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="gd-decay-0.00001"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/final/iris_decay_gd_0.1_0.9_lambda_0.00001_iter1000.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris"/>
            <measurements idref="fitness_hidden_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_hidden_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_elim_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness_hidden_coop" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_decay_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_gbest_norm_W0.8sa1.3ca0.9_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9_decaying"/>
            <problem idref="iris"/>
            <measurements idref="fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_gbest_norm_W0.8sa1.3ca0.9_decaying_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normDefaults_decaying"/>
            <problem idref="iris"/>
            <measurements idref="fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_gbest_norm_defaults_decaying_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_gd_0.1_0.9_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="gd_fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_elim_gd_0.1_0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.00001"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="gd_fitness_hidden" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/iris_decay_gd_0.1_0.9_lambda_0.00001_iter1000.csv"/>
        </simulation>
        
        
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_elim_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="coop_gbest30normW0.8sa1.3ca0.9_2"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_decay_gbest_norm_W0.8sa1.3ca0.9_coop2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_elim_gd_0.1_0.9_lambda_0.00005_c_2_iter1000.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.00001"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="fitness_penalty" />
            <output format="TXT" file="data/output/regularisation/iris/final/weights/pen_iris_decay_gd_0.1_0.9_lambda_0.00001_iter1000.csv"/>
        </simulation-->
        
        
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris_softmax"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_softmax_logli.csv"/>
        </simulation-->
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0"/>
            <problem idref="heart_loglikelihood"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/heart_logli_def.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0norm"/>
            <problem idref="heart_loglikelihood"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/heart_logli_def_norm.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0"/>
            <problem idref="heart"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/heart_mse_def.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0norm"/>
            <problem idref="heart"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/heart_mse_def_norm.csv"/>
        </simulation>
        <!--simulation samples="30">
            <algorithm idref="gbest30vmax1.0"/>
            <problem idref="diabetes_loglikelihood"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/diabetes_logli_oo_def.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0norm"/>
            <problem idref="diabetes_loglikelihood"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/diabetes_logli_oo_def_norm.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0"/>
            <problem idref="diabetes"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/diabetes_mse_def.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30vmax1.0norm"/>
            <problem idref="diabetes"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/loglikelihood/diabetes_mse_def_norm.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.1"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.2"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.3"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.4"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.4.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.5"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.6"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.6.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.7"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.7.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.8"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.8.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.1_0.9.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gradientdescent_0.2_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.2_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.3_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.3_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.4_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.4_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.5_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.5_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.6_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.6_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.7_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.7_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.8_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.8_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.9_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gd_0.9_0.9.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9_decaying"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.9_decaying.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="lbestDecaying30vmax2.0"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_lbestDecaying_vmax_2.0.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.00001"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_decay_gd_0.1_0.9_lambda_0.00001.csv"/>
        </simulation> 
        <simulation samples="30">
            <algorithm idref="gradientdescent_0.1_0.9"/>
            <problem idref="iris"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_gd_0.1_0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.0001-c1"/>
            <problem idref="iris-elim-l0.0001-c1"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_elim_gd_0.1_0.9_lambda_0.0001_c_1.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gbest30norm"/>
            <problem idref="iris-elim-l0.0001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_elim_gbest_norm_lambda_0.0001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30norm"/>
            <problem idref="iris-decay-0.0001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/iris_decay_gbest_norm_lambda_0.0001.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gbest30norm1.0"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_weight0.2_max1.0.csv"/>
        </simulation>      
        <simulation samples="30">
            <algorithm idref="gbest30norm2.0"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_weight0.2_max2.0.csv"/>
        </simulation>         
        <simulation samples="30">
            <algorithm idref="gbest30norm5.0"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_weight0.2_max5.0.csv"/>
        </simulation>          
        <simulation samples="30">
            <algorithm idref="gbest30norm10.0"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_weight0.2_max10.0.csv"/>
        </simulation-->      
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.1.csv"/>
        </simulation>     
        <simulation samples="30">
            <algorithm idref="gbest30normW0.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.5"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.5.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normWdefault"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_Wdefault.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW1.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W1.1.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa0.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa0.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa0.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa0.5"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa0.5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa0.7"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa0.7.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa0.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.5"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.7"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.7.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa2.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa2.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa2.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa2.3.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.5"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.7"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.7.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca0.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca1.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca1.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca1.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca1.3.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca1.5"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca1.5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca1.7"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca1.7.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca1.9"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca1.9.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca2.1"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca2.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca2.3"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_gbest_norm_W0.8sa1.3ca2.3.csv"/>
        </simulation-->
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.000005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.000005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.0005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.0005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.01"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.05"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.05.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-decay-0.5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gbest_norm_W0.8sa1.3ca0.9_lambda_0.5.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gd-decay-0.000005"/>
            <problem idref="iris-decay-0.000005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.000005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.00001"/>
            <problem idref="iris-decay-0.00001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.00001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.00005"/>
            <problem idref="iris-decay-0.00005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.00005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.0005"/>
            <problem idref="iris-decay-0.0005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.0005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.001"/>
            <problem idref="iris-decay-0.001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.005"/>
            <problem idref="iris-decay-0.005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.01"/>
            <problem idref="iris-decay-0.01"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.05"/>
            <problem idref="iris-decay-0.05"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.05.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.1"/>
            <problem idref="iris-decay-0.1"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-0.5"/>
            <problem idref="iris-decay-0.5"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_decay_gd_0.1_0.9_lambda_0.5.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gd-decay-5"/>
            <problem idref="iris-decay-5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/wd/iris_decay_gd_0.1_0.9_lambda_5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-decay-10"/>
            <problem idref="iris-decay-10"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/wd/iris_decay_gd_0.1_0.9_lambda_10.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c0.0001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_0.0001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c0.001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c0.01"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c0.1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005-c10"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005_c_10.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.00005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.00005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.0001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.0001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.0005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.0005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.001"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.005"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.01"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.05"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.05.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gbest30normW0.8sa1.3ca0.9"/>
            <problem idref="iris-elim-l0.5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gbest_norm_W0.8sa1.3ca0.9_lambda_0.5.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gd-elim-l0.00001"/>
            <problem idref="iris-elim-l0.00001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005"/>
            <problem idref="iris-elim-l0.00005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.0001"/>
            <problem idref="iris-elim-l0.0001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.0001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.0005"/>
            <problem idref="iris-elim-l0.0005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.0005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.001"/>
            <problem idref="iris-elim-l0.001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.005"/>
            <problem idref="iris-elim-l0.005"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.005.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.01"/>
            <problem idref="iris-elim-l0.01"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.05"/>
            <problem idref="iris-elim-l0.05"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.05.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.1"/>
            <problem idref="iris-elim-l0.1"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.5"/>
            <problem idref="iris-elim-l0.5"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.5.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c0.00001"/>
            <problem idref="iris-elim-l0.00005-c0.00001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_0.00001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c0.0001"/>
            <problem idref="iris-elim-l0.00005-c0.0001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_0.0001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c0.001"/>
            <problem idref="iris-elim-l0.00005-c0.001"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_0.001.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c0.01"/>
            <problem idref="iris-elim-l0.00005-c0.01"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_0.01.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c0.1"/>
            <problem idref="iris-elim-l0.00005-c0.1"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_0.1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c1"/>
            <problem idref="iris-elim-l0.00005-c1"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_1.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c2"/>
            <problem idref="iris-elim-l0.00005-c2"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_2.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c5"/>
            <problem idref="iris-elim-l0.00005-c5"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_5.csv"/>
        </simulation>
        <simulation samples="30">
            <algorithm idref="gd-elim-l0.00005-c10"/>
            <problem idref="iris-elim-l0.00005-c10"/>
            <measurements idref="gd_fitness" />
            <output format="TXT" file="data/output/regularisation/iris/opt/iris_elim_gd_0.1_0.9_lambda_0.00005_c_10.csv"/>
        </simulation-->
        
        <!--simulation samples="30">
            <algorithm idref="gradientdescent_0.01_0.6"/>
            <problem idref="iris"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/output/regularisation/gd/iris_gd_0.01_0.6.csv"/>
        </simulation-->     

    </simulations>
</simulator>
