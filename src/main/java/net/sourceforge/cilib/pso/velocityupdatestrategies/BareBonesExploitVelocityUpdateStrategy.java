/**
 * Computational Intelligence Library (CIlib)
 * Copyright (C) 2003 - 2010
 * Computational Intelligence Research Group (CIRG@UP)
 * Department of Computer Science
 * University of Pretoria
 * South Africa
 *
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, see <http://www.gnu.org/licenses/>.
 */
package net.sourceforge.cilib.pso.velocityupdatestrategies;

import net.sourceforge.cilib.entity.Particle;
import net.sourceforge.cilib.math.random.ProbabilityDistributionFuction;
import net.sourceforge.cilib.math.random.UniformDistribution;
import net.sourceforge.cilib.type.types.container.Vector;

/**
 *  The <tt>VelocityUpdateStrategy</tt> strategy for the Bare Bones PSO as
 *  adapted by Kennedy.
 *
 *  TODO: get the required references
 *
 *  @author Andries Engelbrecht
 */
public class BareBonesExploitVelocityUpdateStrategy extends BareBonesVelocityUpdateStrategy {

    private static final long serialVersionUID = -5028807853700576434L;
    private ProbabilityDistributionFuction uniform;

    public BareBonesExploitVelocityUpdateStrategy() {
        super();
        uniform = new UniformDistribution();
    }

    public BareBonesExploitVelocityUpdateStrategy(BareBonesExploitVelocityUpdateStrategy copy) {
        super(copy);
        uniform = copy.uniform;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BareBonesExploitVelocityUpdateStrategy getClone() {
        return new BareBonesExploitVelocityUpdateStrategy(this);
    }

    @Override
    public void updateVelocity(Particle particle) {
        Vector velocity = (Vector) particle.getVelocity();
        Vector personalBestPosition = (Vector) particle.getBestPosition();
        Vector nBestPosition = (Vector) particle.getNeighbourhoodBest().getBestPosition();

        for (int i = 0; i < particle.getDimension(); ++i) {
            if (uniform.getRandomNumber(0, 1) < 0.5) {
                velocity.setReal(i, personalBestPosition.doubleValueOf(i));
            } else {
                velocity.setReal(i, super.bareBonesUpdate(i, personalBestPosition, nBestPosition));
            }
        }
    }

    public ProbabilityDistributionFuction getUniform() {
        return uniform;
    }

    public void setUniform(ProbabilityDistributionFuction uniform) {
        this.uniform = uniform;
    }
}
